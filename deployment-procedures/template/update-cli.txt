***************************************************************
 Quick Install Guide
***************************************************************
# on the provisioner host
ssh <<ENV>-PROV-HOST>

# Get a baseline
ssh <<ENV>-CLI-HOST> iocdb --observable_values 1.1.1.1 --encoder summary
ssh <<ENV>-CLI-HOST> iocdb --observable_values 1.1.1.1 --encoder summary > /tmp/baseline
ssh <<ENV>-CLI-HOST> iocdb --observable_values 1.1.1.1 --encoder summary | wc > /tmp/baseline-wc
cat /tmp/baseline-wc

# Set environment variables and make sure they match actual destination host
export NODE_NAME="<<ENV>-CLI-HOST>" NODE_IP="<<ENV>-CLI-IP>"
echo "*** Make sure local and remote values match ***"
echo "local:  $NODE_NAME / $NODE_IP"
echo "remote: `ssh <<ENV>-CLI-HOST> hostname` / `ssh <<ENV>-CLI-HOST> hostname -I`"

# Validate the node file
cat /opt/iocdb_provisioner/iocdb-infrastructure/nodes/<<ENV>-CLI-HOST>.json

# Run chef to perform the update
cd /opt/iocdb_provisioner/iocdb-infrastructure/
knife solo cook $NODE_IP -N $NODE_NAME --identity-file ~/.ssh/<<ENV>-SSH-KEY>

# Verify against baseline
ssh <<ENV>-CLI-HOST> iocdb --version
ssh <<ENV>-CLI-HOST> iocdb --observable_values 1.1.1.1 --encoder summary | wc
ssh <<ENV>-CLI-HOST> cat /tmp/baseline-wc

# Make sure process(es) are running
ssh <<ENV>-JUMP-HOST> ps -ef | grep iocdb-rest

--- Installation is complete ---

#------------------------------------------------------------------------
# 0 - Update the iocdb-prov box in preparation for install
#------------------------------------------------------------------------

# on the provisioner host
ssh <<ENV>-PROV-HOST>

# Follow the instructions in ./update-provisioner.txt
view /opt/iocdb_provisioner/iocdb-infrastructure/deployment-procedures/update-provisioner.txt

#------------------------------------------------------------------------
# 0.2 Preparation on destination host
#------------------------------------------------------------------------

# On the CLI box
ssh <<ENV>-CLI-HOST>

# Note: This only has to be done once.  If it's been done before, you can 
#       skip this step.
# 
#   Verify you can reach the iocdb-staging server from iocdb_prov user and 
#   root.  If this doesn't work the chef installation will fail as it will 
#   be unable to access and deploy repository files.  If either of these 
#   fail, copy the following files from the provisioner host into 
#   the iocdb_prov and root accounts:
#     ~iocdb_prov/.ssh/config
#     ~iocdb_prov/.ssh/<<ENV>-SSH-KEY>

## Test access as iocdb_prov user - Should log in without password prompt
ssh iocdb-staging

## Test access as root - Should log in without password prompt
sudo su -
[root]# ssh iocdb-staging

#------------------------------------------------------------------------
# 1 Take a baseline 
#  Note: Archive backup is now performed by the chef scripts
#        Also, iocdb-rest processes are now stopped by the chef scripts
#------------------------------------------------------------------------

# On the destination host
ssh <<ENV>-CLI-HOST>

# Take a simple baseline for later sanity check
iocdb --observable_values 1.1.1.1 --encoder summary
iocdb --observable_values 1.1.1.1 --encoder summary > /tmp/baseline
iocdb --observable_values 1.1.1.1 --encoder summary | wc > /tmp/baseline-wc
cat /tmp/baseline-wc

# Double check the host name and ip address (Used in the next sections)
echo "`hostname` / `hostname -I`"

#------------------------------------------------------------------------
# 2 - Setup iocdb-prov environment
#------------------------------------------------------------------------

# On the provisioner host

First, follow the instructions in ./update-provisioner.txt
ssh <<ENV>-PROV-HOST>

# Set environment variables
export NODE_NAME="<<ENV>-CLI-HOST>" NODE_IP="<<ENV>-CLI-IP>"
# This should match the host and ip address shown earlier
echo "$NODE_NAME / $NODE_IP"

#------------------------------------------------------------------------
# 3 - Validate the recipes for the provisioner are correct
#------------------------------------------------------------------------

# Verify the node file points to the correct ip and node name and it's runlist is for iocdb-cli.
#   Note: If this is a new node, you will want to create a new node file as described in the 
#         installation procedures.
# 
cat /opt/iocdb_provisioner/iocdb-infrastructure/nodes/<<ENV>-CLI-HOST>.json

{
  "run_list": [
    "iocdb-infrastructure::iocdb-client",
    "iocdb-infrastructure::iocdb-rest"
  ],
  "automatic": {
    "ipaddress": "<<ENV>-CLI-IP>"
  }
}

# If it is not correct, backup the file, modify it so that it is correct.
#   Make sure to check it in to the iocdb-infrastrucure git repo.

# Note:  Do these steps only if the file does not exist yet.
# 
##   If this file doesn't yet exist, chef was likely not yet installed to 
##   the new destination machine.  Run the following command to bootstrap 
##   chef onto the new host and create the node file.  If you create the 
##   file make sure it gets checked in to the iocdb-infrastructure repo.
cd /opt/iocdb_provisioner/iocdb-infrastructure
knife solo prepare $NODE_IP -N $NODE_NAME --bootstrap-version 12 --identity-file ~/.ssh/<<ENV>-SSH-KEY>

#------------------------------------------------------------------------
# 4 - Run chef to install the update to the iocdb-cli box
#------------------------------------------------------------------------

# Run chef to update the iocdb-cli box
cd /opt/iocdb_provisioner/iocdb-infrastructure/
knife solo cook $NODE_IP -N $NODE_NAME --identity-file ~/.ssh/<<ENV>-SSH-KEY>

# Note: These warnings are normal:
  WARNING: Local cookbook_path '/opt/iocdb_provisioner/iocdb-infrastructure/site-cookbooks' does not exist
  WARNING: Local role_path 'roles' does not exist
  WARNING: Local data_bag_path 'data_bags' does not exist
  WARNING: Local environment_path 'environments' does not exist

#------------------------------------------------------------------------
# 4.1 - Exception steps    (Only do these steps on error)
# 
# Note: If you received the following error, perform the these steps.
#       Recipe Compile Error in /home/.../poise/libraries/default.rb ...
#       Halite is not compatible with no_lazy_load false, ...
#------------------------------------------------------------------------
# On the destination host, remove the following directories:
ssh <<ENV>-CLI-HOST>
rm -fr ~iocdb_prov/.berkshelf
sudo rm -fr /opt/chef/

# Then repeat the knife solo steps as described above:
#   knife solo prepare ... 
#   knife solo cook ...

#------------------------------------------------------------------------
# 5 - Configure the new host
#------------------------------------------------------------------------
# On the new host
ssh <<ENV>-CLI-HOST>

# Compare differences - You'll need to add any new configuration back after restoring original below
#   Update the configuration file manually if needed.  Note: If changes are needed, 
#   they need to be checked into the iocdb-infrastructure.git repo (in the template dir).
diff /tmp/src-$(date +%Y%m%d)/iocdb-*/iocdb/data/settings.yaml /src/iocdb/iocdb/data/settings.yaml

# Note: Only do this step if you've made a change to the config file.  
#   If you have made any changes, you will need to reinstall iocdb to the python dist.
cd /src/iocdb
python setup.py uninstall  <- Note this doesn't work - fix TBD
python setup.py install

# Test it
iocdb --observable_values 1.1.1.1
# make sure these are like baseline in /tmp/baseline*
iocdb --observable_values 1.1.1.1 --encoder summary
iocdb --observable_values 1.1.1.1 --encoder summary | wc

# Check that the correct version of iocdb was installed
iocdb --version

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# End of Update the cli box
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
